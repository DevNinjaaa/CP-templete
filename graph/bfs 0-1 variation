//https://codeforces.com/contest/1063/problem/B   codeforeces problem

#include <bits/stdc++.h>
using namespace std;
#define ll long long
 
// Directions: down, up, right, left
vector<int> dx = {1, -1, 0, 0};
vector<int> dy = {0, 0, 1, -1};
 
struct Vertex {
    ll l = 0;
    ll r = 0;
    bool v = false;
 
    Vertex& operator=(const Vertex& b) {
        if (this != &b) {
            l = b.l;
            r = b.r;
            v = true;
        }
        return *this;
    }
};
 
ll bfs0_1(vector<vector<char>>& data, ll x, ll y, ll l, ll r) {
    ll cnt = 0;
    vector<vector<Vertex>> d(data.size(), vector<Vertex>(data[0].size()));
    d[x][y].l = l;
    d[x][y].r = r;
    d[x][y].v = true;
 
    deque<pair<ll, ll>> p;
    p.emplace_front(x, y);
 
    while (!p.empty()) {
        pair<ll, ll> v = p.front();
        p.pop_front();
        ll curX = v.first;
        ll curY = v.second;
 
        for (int i = 0; i < 4; i++) {
            ll newX = curX + dx[i];
            ll newY = curY + dy[i];
 
            if (newX >= 0 && newX < data.size() && newY >= 0 && newY < data[0].size() && data[newX][newY] != '*') {
                if (!d[newX][newY].v) { // Only proceed if not visited
                    if (i == 2 && d[curX][curY].r > 0) { // Move right
                        d[newX][newY] = d[curX][curY];
                        d[newX][newY].r--;
                        p.emplace_back(newX, newY);
                        cnt++;
                    } else if (i == 3 && d[curX][curY].l > 0) { // Move left
                        d[newX][newY] = d[curX][curY];
                        d[newX][newY].l--;
                        p.emplace_back(newX, newY);
                        cnt++;
                    } else if (i == 0 || i == 1) { // Move up or down
                        d[newX][newY] = d[curX][curY];
                        p.emplace_front(newX, newY);
                        cnt++;
                    }
                }
            }
        }
    }
 
    return cnt;
}
 
int main() {
    ll n, m, x, y, l, r;
    cin >> n >> m >> x >> y >> l >> r;
    vector<vector<char>> data(n, vector<char>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> data[i][j];
        }
    }
    ll cnt = bfs0_1(data, x - 1, y - 1, l, r);
 
    cout << cnt+1;
    return 0;
}

